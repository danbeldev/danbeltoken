// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// DanBelTokenNFTCollection is an auto generated low-level Go binding around an user-defined struct.
type DanBelTokenNFTCollection struct {
	Id   *big.Int
	Addr common.Address
	Name string
	Desc string
}

// ContractMetaData contains all meta data concerning the Contract contract.
var ContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"max\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jack\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"auctionBet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"auctionSetFinal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endDate\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFinal\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"}],\"internalType\":\"structDanBelToken.NFTCollection\",\"name\":\"collection\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colNfts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"b\",\"type\":\"string\"}],\"name\":\"compareStrings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endDate\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"}],\"name\":\"createNFTCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"createDateInUnixTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"createNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getReferralCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"isEmpty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftCollections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nfts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"desc\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"createDateInUnixTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"refCodeUser\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fromReferralCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"discountPercent\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"colId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"setColNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"setReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"setUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"transferNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"transferNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fromReferralCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"discountPercent\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// ContractABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMetaData.ABI instead.
var ContractABI = ContractMetaData.ABI

// ContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMetaData.Bin instead.
var ContractBin = ContractMetaData.Bin

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend, _owner common.Address, tom common.Address, max common.Address, jack common.Address) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBin), backend, _owner, tom, max, jack)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// Auctions is a free data retrieval call binding the contract method 0x571a26a0.
//
// Solidity: function auctions(uint256 ) view returns(uint256 id, uint64 startDate, uint64 endDate, uint256 minPrice, uint256 maxPrice, address addr, uint256 bet, bool isFinal, (uint256,address,string,string) collection)
func (_Contract *ContractCaller) Auctions(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Id         *big.Int
	StartDate  uint64
	EndDate    uint64
	MinPrice   *big.Int
	MaxPrice   *big.Int
	Addr       common.Address
	Bet        *big.Int
	IsFinal    bool
	Collection DanBelTokenNFTCollection
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "auctions", arg0)

	outstruct := new(struct {
		Id         *big.Int
		StartDate  uint64
		EndDate    uint64
		MinPrice   *big.Int
		MaxPrice   *big.Int
		Addr       common.Address
		Bet        *big.Int
		IsFinal    bool
		Collection DanBelTokenNFTCollection
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.StartDate = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.EndDate = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.MinPrice = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.MaxPrice = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.Addr = *abi.ConvertType(out[5], new(common.Address)).(*common.Address)
	outstruct.Bet = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.IsFinal = *abi.ConvertType(out[7], new(bool)).(*bool)
	outstruct.Collection = *abi.ConvertType(out[8], new(DanBelTokenNFTCollection)).(*DanBelTokenNFTCollection)

	return *outstruct, err

}

// Auctions is a free data retrieval call binding the contract method 0x571a26a0.
//
// Solidity: function auctions(uint256 ) view returns(uint256 id, uint64 startDate, uint64 endDate, uint256 minPrice, uint256 maxPrice, address addr, uint256 bet, bool isFinal, (uint256,address,string,string) collection)
func (_Contract *ContractSession) Auctions(arg0 *big.Int) (struct {
	Id         *big.Int
	StartDate  uint64
	EndDate    uint64
	MinPrice   *big.Int
	MaxPrice   *big.Int
	Addr       common.Address
	Bet        *big.Int
	IsFinal    bool
	Collection DanBelTokenNFTCollection
}, error) {
	return _Contract.Contract.Auctions(&_Contract.CallOpts, arg0)
}

// Auctions is a free data retrieval call binding the contract method 0x571a26a0.
//
// Solidity: function auctions(uint256 ) view returns(uint256 id, uint64 startDate, uint64 endDate, uint256 minPrice, uint256 maxPrice, address addr, uint256 bet, bool isFinal, (uint256,address,string,string) collection)
func (_Contract *ContractCallerSession) Auctions(arg0 *big.Int) (struct {
	Id         *big.Int
	StartDate  uint64
	EndDate    uint64
	MinPrice   *big.Int
	MaxPrice   *big.Int
	Addr       common.Address
	Bet        *big.Int
	IsFinal    bool
	Collection DanBelTokenNFTCollection
}, error) {
	return _Contract.Contract.Auctions(&_Contract.CallOpts, arg0)
}

// ColNfts is a free data retrieval call binding the contract method 0x23024f56.
//
// Solidity: function colNfts(uint256 , uint256 ) view returns(uint256)
func (_Contract *ContractCaller) ColNfts(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "colNfts", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ColNfts is a free data retrieval call binding the contract method 0x23024f56.
//
// Solidity: function colNfts(uint256 , uint256 ) view returns(uint256)
func (_Contract *ContractSession) ColNfts(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _Contract.Contract.ColNfts(&_Contract.CallOpts, arg0, arg1)
}

// ColNfts is a free data retrieval call binding the contract method 0x23024f56.
//
// Solidity: function colNfts(uint256 , uint256 ) view returns(uint256)
func (_Contract *ContractCallerSession) ColNfts(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _Contract.Contract.ColNfts(&_Contract.CallOpts, arg0, arg1)
}

// CompareStrings is a free data retrieval call binding the contract method 0xbed34bba.
//
// Solidity: function compareStrings(string a, string b) view returns(bool)
func (_Contract *ContractCaller) CompareStrings(opts *bind.CallOpts, a string, b string) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "compareStrings", a, b)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CompareStrings is a free data retrieval call binding the contract method 0xbed34bba.
//
// Solidity: function compareStrings(string a, string b) view returns(bool)
func (_Contract *ContractSession) CompareStrings(a string, b string) (bool, error) {
	return _Contract.Contract.CompareStrings(&_Contract.CallOpts, a, b)
}

// CompareStrings is a free data retrieval call binding the contract method 0xbed34bba.
//
// Solidity: function compareStrings(string a, string b) view returns(bool)
func (_Contract *ContractCallerSession) CompareStrings(a string, b string) (bool, error) {
	return _Contract.Contract.CompareStrings(&_Contract.CallOpts, a, b)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_Contract *ContractCaller) Decimals(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_Contract *ContractSession) Decimals() (*big.Int, error) {
	return _Contract.Contract.Decimals(&_Contract.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_Contract *ContractCallerSession) Decimals() (*big.Int, error) {
	return _Contract.Contract.Decimals(&_Contract.CallOpts)
}

// GetReferralCode is a free data retrieval call binding the contract method 0x92c40344.
//
// Solidity: function getReferralCode(address addr) pure returns(string)
func (_Contract *ContractCaller) GetReferralCode(opts *bind.CallOpts, addr common.Address) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getReferralCode", addr)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetReferralCode is a free data retrieval call binding the contract method 0x92c40344.
//
// Solidity: function getReferralCode(address addr) pure returns(string)
func (_Contract *ContractSession) GetReferralCode(addr common.Address) (string, error) {
	return _Contract.Contract.GetReferralCode(&_Contract.CallOpts, addr)
}

// GetReferralCode is a free data retrieval call binding the contract method 0x92c40344.
//
// Solidity: function getReferralCode(address addr) pure returns(string)
func (_Contract *ContractCallerSession) GetReferralCode(addr common.Address) (string, error) {
	return _Contract.Contract.GetReferralCode(&_Contract.CallOpts, addr)
}

// IsEmpty is a free data retrieval call binding the contract method 0x27341c8a.
//
// Solidity: function isEmpty(string s) view returns(bool)
func (_Contract *ContractCaller) IsEmpty(opts *bind.CallOpts, s string) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "isEmpty", s)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsEmpty is a free data retrieval call binding the contract method 0x27341c8a.
//
// Solidity: function isEmpty(string s) view returns(bool)
func (_Contract *ContractSession) IsEmpty(s string) (bool, error) {
	return _Contract.Contract.IsEmpty(&_Contract.CallOpts, s)
}

// IsEmpty is a free data retrieval call binding the contract method 0x27341c8a.
//
// Solidity: function isEmpty(string s) view returns(bool)
func (_Contract *ContractCallerSession) IsEmpty(s string) (bool, error) {
	return _Contract.Contract.IsEmpty(&_Contract.CallOpts, s)
}

// NftCollections is a free data retrieval call binding the contract method 0xbfca66c9.
//
// Solidity: function nftCollections(uint256 ) view returns(uint256 id, address addr, string name, string desc)
func (_Contract *ContractCaller) NftCollections(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Id   *big.Int
	Addr common.Address
	Name string
	Desc string
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "nftCollections", arg0)

	outstruct := new(struct {
		Id   *big.Int
		Addr common.Address
		Name string
		Desc string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Addr = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Name = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.Desc = *abi.ConvertType(out[3], new(string)).(*string)

	return *outstruct, err

}

// NftCollections is a free data retrieval call binding the contract method 0xbfca66c9.
//
// Solidity: function nftCollections(uint256 ) view returns(uint256 id, address addr, string name, string desc)
func (_Contract *ContractSession) NftCollections(arg0 *big.Int) (struct {
	Id   *big.Int
	Addr common.Address
	Name string
	Desc string
}, error) {
	return _Contract.Contract.NftCollections(&_Contract.CallOpts, arg0)
}

// NftCollections is a free data retrieval call binding the contract method 0xbfca66c9.
//
// Solidity: function nftCollections(uint256 ) view returns(uint256 id, address addr, string name, string desc)
func (_Contract *ContractCallerSession) NftCollections(arg0 *big.Int) (struct {
	Id   *big.Int
	Addr common.Address
	Name string
	Desc string
}, error) {
	return _Contract.Contract.NftCollections(&_Contract.CallOpts, arg0)
}

// Nfts is a free data retrieval call binding the contract method 0x265aa621.
//
// Solidity: function nfts(uint256 ) view returns(uint256 id, address addr, string name, string desc, uint256 price, uint64 createDateInUnixTimestamp, uint256 count)
func (_Contract *ContractCaller) Nfts(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Id                        *big.Int
	Addr                      common.Address
	Name                      string
	Desc                      string
	Price                     *big.Int
	CreateDateInUnixTimestamp uint64
	Count                     *big.Int
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "nfts", arg0)

	outstruct := new(struct {
		Id                        *big.Int
		Addr                      common.Address
		Name                      string
		Desc                      string
		Price                     *big.Int
		CreateDateInUnixTimestamp uint64
		Count                     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Addr = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Name = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.Desc = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.Price = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.CreateDateInUnixTimestamp = *abi.ConvertType(out[5], new(uint64)).(*uint64)
	outstruct.Count = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Nfts is a free data retrieval call binding the contract method 0x265aa621.
//
// Solidity: function nfts(uint256 ) view returns(uint256 id, address addr, string name, string desc, uint256 price, uint64 createDateInUnixTimestamp, uint256 count)
func (_Contract *ContractSession) Nfts(arg0 *big.Int) (struct {
	Id                        *big.Int
	Addr                      common.Address
	Name                      string
	Desc                      string
	Price                     *big.Int
	CreateDateInUnixTimestamp uint64
	Count                     *big.Int
}, error) {
	return _Contract.Contract.Nfts(&_Contract.CallOpts, arg0)
}

// Nfts is a free data retrieval call binding the contract method 0x265aa621.
//
// Solidity: function nfts(uint256 ) view returns(uint256 id, address addr, string name, string desc, uint256 price, uint64 createDateInUnixTimestamp, uint256 count)
func (_Contract *ContractCallerSession) Nfts(arg0 *big.Int) (struct {
	Id                        *big.Int
	Addr                      common.Address
	Name                      string
	Desc                      string
	Price                     *big.Int
	CreateDateInUnixTimestamp uint64
	Count                     *big.Int
}, error) {
	return _Contract.Contract.Nfts(&_Contract.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractSession) Owner() (common.Address, error) {
	return _Contract.Contract.Owner(&_Contract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Contract *ContractCallerSession) Owner() (common.Address, error) {
	return _Contract.Contract.Owner(&_Contract.CallOpts)
}

// RefCodeUser is a free data retrieval call binding the contract method 0xf5b88a53.
//
// Solidity: function refCodeUser(string ) view returns(string referralCode, string fromReferralCode, uint256 balance, uint8 discountPercent, string role, address addr)
func (_Contract *ContractCaller) RefCodeUser(opts *bind.CallOpts, arg0 string) (struct {
	ReferralCode     string
	FromReferralCode string
	Balance          *big.Int
	DiscountPercent  uint8
	Role             string
	Addr             common.Address
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "refCodeUser", arg0)

	outstruct := new(struct {
		ReferralCode     string
		FromReferralCode string
		Balance          *big.Int
		DiscountPercent  uint8
		Role             string
		Addr             common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ReferralCode = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.FromReferralCode = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Balance = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.DiscountPercent = *abi.ConvertType(out[3], new(uint8)).(*uint8)
	outstruct.Role = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.Addr = *abi.ConvertType(out[5], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// RefCodeUser is a free data retrieval call binding the contract method 0xf5b88a53.
//
// Solidity: function refCodeUser(string ) view returns(string referralCode, string fromReferralCode, uint256 balance, uint8 discountPercent, string role, address addr)
func (_Contract *ContractSession) RefCodeUser(arg0 string) (struct {
	ReferralCode     string
	FromReferralCode string
	Balance          *big.Int
	DiscountPercent  uint8
	Role             string
	Addr             common.Address
}, error) {
	return _Contract.Contract.RefCodeUser(&_Contract.CallOpts, arg0)
}

// RefCodeUser is a free data retrieval call binding the contract method 0xf5b88a53.
//
// Solidity: function refCodeUser(string ) view returns(string referralCode, string fromReferralCode, uint256 balance, uint8 discountPercent, string role, address addr)
func (_Contract *ContractCallerSession) RefCodeUser(arg0 string) (struct {
	ReferralCode     string
	FromReferralCode string
	Balance          *big.Int
	DiscountPercent  uint8
	Role             string
	Addr             common.Address
}, error) {
	return _Contract.Contract.RefCodeUser(&_Contract.CallOpts, arg0)
}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() view returns(uint256)
func (_Contract *ContractCaller) StartTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "startTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() view returns(uint256)
func (_Contract *ContractSession) StartTime() (*big.Int, error) {
	return _Contract.Contract.StartTime(&_Contract.CallOpts)
}

// StartTime is a free data retrieval call binding the contract method 0x78e97925.
//
// Solidity: function startTime() view returns(uint256)
func (_Contract *ContractCallerSession) StartTime() (*big.Int, error) {
	return _Contract.Contract.StartTime(&_Contract.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contract *ContractCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contract *ContractSession) Symbol() (string, error) {
	return _Contract.Contract.Symbol(&_Contract.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Contract *ContractCallerSession) Symbol() (string, error) {
	return _Contract.Contract.Symbol(&_Contract.CallOpts)
}

// TokenName is a free data retrieval call binding the contract method 0x6c02a931.
//
// Solidity: function tokenName() view returns(string)
func (_Contract *ContractCaller) TokenName(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "tokenName")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenName is a free data retrieval call binding the contract method 0x6c02a931.
//
// Solidity: function tokenName() view returns(string)
func (_Contract *ContractSession) TokenName() (string, error) {
	return _Contract.Contract.TokenName(&_Contract.CallOpts)
}

// TokenName is a free data retrieval call binding the contract method 0x6c02a931.
//
// Solidity: function tokenName() view returns(string)
func (_Contract *ContractCallerSession) TokenName() (string, error) {
	return _Contract.Contract.TokenName(&_Contract.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contract *ContractCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contract *ContractSession) TotalSupply() (*big.Int, error) {
	return _Contract.Contract.TotalSupply(&_Contract.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Contract *ContractCallerSession) TotalSupply() (*big.Int, error) {
	return _Contract.Contract.TotalSupply(&_Contract.CallOpts)
}

// UserAddress is a free data retrieval call binding the contract method 0x9674a0ac.
//
// Solidity: function userAddress(uint256 ) view returns(address)
func (_Contract *ContractCaller) UserAddress(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "userAddress", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UserAddress is a free data retrieval call binding the contract method 0x9674a0ac.
//
// Solidity: function userAddress(uint256 ) view returns(address)
func (_Contract *ContractSession) UserAddress(arg0 *big.Int) (common.Address, error) {
	return _Contract.Contract.UserAddress(&_Contract.CallOpts, arg0)
}

// UserAddress is a free data retrieval call binding the contract method 0x9674a0ac.
//
// Solidity: function userAddress(uint256 ) view returns(address)
func (_Contract *ContractCallerSession) UserAddress(arg0 *big.Int) (common.Address, error) {
	return _Contract.Contract.UserAddress(&_Contract.CallOpts, arg0)
}

// Users is a free data retrieval call binding the contract method 0xa87430ba.
//
// Solidity: function users(address ) view returns(string referralCode, string fromReferralCode, uint256 balance, uint8 discountPercent, string role, address addr)
func (_Contract *ContractCaller) Users(opts *bind.CallOpts, arg0 common.Address) (struct {
	ReferralCode     string
	FromReferralCode string
	Balance          *big.Int
	DiscountPercent  uint8
	Role             string
	Addr             common.Address
}, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "users", arg0)

	outstruct := new(struct {
		ReferralCode     string
		FromReferralCode string
		Balance          *big.Int
		DiscountPercent  uint8
		Role             string
		Addr             common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ReferralCode = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.FromReferralCode = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Balance = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.DiscountPercent = *abi.ConvertType(out[3], new(uint8)).(*uint8)
	outstruct.Role = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.Addr = *abi.ConvertType(out[5], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// Users is a free data retrieval call binding the contract method 0xa87430ba.
//
// Solidity: function users(address ) view returns(string referralCode, string fromReferralCode, uint256 balance, uint8 discountPercent, string role, address addr)
func (_Contract *ContractSession) Users(arg0 common.Address) (struct {
	ReferralCode     string
	FromReferralCode string
	Balance          *big.Int
	DiscountPercent  uint8
	Role             string
	Addr             common.Address
}, error) {
	return _Contract.Contract.Users(&_Contract.CallOpts, arg0)
}

// Users is a free data retrieval call binding the contract method 0xa87430ba.
//
// Solidity: function users(address ) view returns(string referralCode, string fromReferralCode, uint256 balance, uint8 discountPercent, string role, address addr)
func (_Contract *ContractCallerSession) Users(arg0 common.Address) (struct {
	ReferralCode     string
	FromReferralCode string
	Balance          *big.Int
	DiscountPercent  uint8
	Role             string
	Addr             common.Address
}, error) {
	return _Contract.Contract.Users(&_Contract.CallOpts, arg0)
}

// AuctionBet is a paid mutator transaction binding the contract method 0x5a84e849.
//
// Solidity: function auctionBet(uint256 auctionId, uint256 bet, address addr) returns()
func (_Contract *ContractTransactor) AuctionBet(opts *bind.TransactOpts, auctionId *big.Int, bet *big.Int, addr common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "auctionBet", auctionId, bet, addr)
}

// AuctionBet is a paid mutator transaction binding the contract method 0x5a84e849.
//
// Solidity: function auctionBet(uint256 auctionId, uint256 bet, address addr) returns()
func (_Contract *ContractSession) AuctionBet(auctionId *big.Int, bet *big.Int, addr common.Address) (*types.Transaction, error) {
	return _Contract.Contract.AuctionBet(&_Contract.TransactOpts, auctionId, bet, addr)
}

// AuctionBet is a paid mutator transaction binding the contract method 0x5a84e849.
//
// Solidity: function auctionBet(uint256 auctionId, uint256 bet, address addr) returns()
func (_Contract *ContractTransactorSession) AuctionBet(auctionId *big.Int, bet *big.Int, addr common.Address) (*types.Transaction, error) {
	return _Contract.Contract.AuctionBet(&_Contract.TransactOpts, auctionId, bet, addr)
}

// AuctionSetFinal is a paid mutator transaction binding the contract method 0x39eda97c.
//
// Solidity: function auctionSetFinal(uint256 auctionId) returns()
func (_Contract *ContractTransactor) AuctionSetFinal(opts *bind.TransactOpts, auctionId *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "auctionSetFinal", auctionId)
}

// AuctionSetFinal is a paid mutator transaction binding the contract method 0x39eda97c.
//
// Solidity: function auctionSetFinal(uint256 auctionId) returns()
func (_Contract *ContractSession) AuctionSetFinal(auctionId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.AuctionSetFinal(&_Contract.TransactOpts, auctionId)
}

// AuctionSetFinal is a paid mutator transaction binding the contract method 0x39eda97c.
//
// Solidity: function auctionSetFinal(uint256 auctionId) returns()
func (_Contract *ContractTransactorSession) AuctionSetFinal(auctionId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.AuctionSetFinal(&_Contract.TransactOpts, auctionId)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x09172ea6.
//
// Solidity: function createAuction(uint256 collectionId, uint64 startDate, uint64 endDate, uint256 minPrice, uint256 maxPrice) returns()
func (_Contract *ContractTransactor) CreateAuction(opts *bind.TransactOpts, collectionId *big.Int, startDate uint64, endDate uint64, minPrice *big.Int, maxPrice *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "createAuction", collectionId, startDate, endDate, minPrice, maxPrice)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x09172ea6.
//
// Solidity: function createAuction(uint256 collectionId, uint64 startDate, uint64 endDate, uint256 minPrice, uint256 maxPrice) returns()
func (_Contract *ContractSession) CreateAuction(collectionId *big.Int, startDate uint64, endDate uint64, minPrice *big.Int, maxPrice *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.CreateAuction(&_Contract.TransactOpts, collectionId, startDate, endDate, minPrice, maxPrice)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x09172ea6.
//
// Solidity: function createAuction(uint256 collectionId, uint64 startDate, uint64 endDate, uint256 minPrice, uint256 maxPrice) returns()
func (_Contract *ContractTransactorSession) CreateAuction(collectionId *big.Int, startDate uint64, endDate uint64, minPrice *big.Int, maxPrice *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.CreateAuction(&_Contract.TransactOpts, collectionId, startDate, endDate, minPrice, maxPrice)
}

// CreateNFTCollection is a paid mutator transaction binding the contract method 0xbbc7bee5.
//
// Solidity: function createNFTCollection(address addr, string name, string desc) returns()
func (_Contract *ContractTransactor) CreateNFTCollection(opts *bind.TransactOpts, addr common.Address, name string, desc string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "createNFTCollection", addr, name, desc)
}

// CreateNFTCollection is a paid mutator transaction binding the contract method 0xbbc7bee5.
//
// Solidity: function createNFTCollection(address addr, string name, string desc) returns()
func (_Contract *ContractSession) CreateNFTCollection(addr common.Address, name string, desc string) (*types.Transaction, error) {
	return _Contract.Contract.CreateNFTCollection(&_Contract.TransactOpts, addr, name, desc)
}

// CreateNFTCollection is a paid mutator transaction binding the contract method 0xbbc7bee5.
//
// Solidity: function createNFTCollection(address addr, string name, string desc) returns()
func (_Contract *ContractTransactorSession) CreateNFTCollection(addr common.Address, name string, desc string) (*types.Transaction, error) {
	return _Contract.Contract.CreateNFTCollection(&_Contract.TransactOpts, addr, name, desc)
}

// CreateNft is a paid mutator transaction binding the contract method 0xe5ab0d24.
//
// Solidity: function createNft(address addr, string name, string desc, uint256 price, uint64 createDateInUnixTimestamp, uint256 count) returns()
func (_Contract *ContractTransactor) CreateNft(opts *bind.TransactOpts, addr common.Address, name string, desc string, price *big.Int, createDateInUnixTimestamp uint64, count *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "createNft", addr, name, desc, price, createDateInUnixTimestamp, count)
}

// CreateNft is a paid mutator transaction binding the contract method 0xe5ab0d24.
//
// Solidity: function createNft(address addr, string name, string desc, uint256 price, uint64 createDateInUnixTimestamp, uint256 count) returns()
func (_Contract *ContractSession) CreateNft(addr common.Address, name string, desc string, price *big.Int, createDateInUnixTimestamp uint64, count *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.CreateNft(&_Contract.TransactOpts, addr, name, desc, price, createDateInUnixTimestamp, count)
}

// CreateNft is a paid mutator transaction binding the contract method 0xe5ab0d24.
//
// Solidity: function createNft(address addr, string name, string desc, uint256 price, uint64 createDateInUnixTimestamp, uint256 count) returns()
func (_Contract *ContractTransactorSession) CreateNft(addr common.Address, name string, desc string, price *big.Int, createDateInUnixTimestamp uint64, count *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.CreateNft(&_Contract.TransactOpts, addr, name, desc, price, createDateInUnixTimestamp, count)
}

// SetColNft is a paid mutator transaction binding the contract method 0x67e75cde.
//
// Solidity: function setColNft(uint256 colId, uint256 nftId) returns()
func (_Contract *ContractTransactor) SetColNft(opts *bind.TransactOpts, colId *big.Int, nftId *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setColNft", colId, nftId)
}

// SetColNft is a paid mutator transaction binding the contract method 0x67e75cde.
//
// Solidity: function setColNft(uint256 colId, uint256 nftId) returns()
func (_Contract *ContractSession) SetColNft(colId *big.Int, nftId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.SetColNft(&_Contract.TransactOpts, colId, nftId)
}

// SetColNft is a paid mutator transaction binding the contract method 0x67e75cde.
//
// Solidity: function setColNft(uint256 colId, uint256 nftId) returns()
func (_Contract *ContractTransactorSession) SetColNft(colId *big.Int, nftId *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.SetColNft(&_Contract.TransactOpts, colId, nftId)
}

// SetReferral is a paid mutator transaction binding the contract method 0xb6a984ba.
//
// Solidity: function setReferral(address addr, string code) returns()
func (_Contract *ContractTransactor) SetReferral(opts *bind.TransactOpts, addr common.Address, code string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setReferral", addr, code)
}

// SetReferral is a paid mutator transaction binding the contract method 0xb6a984ba.
//
// Solidity: function setReferral(address addr, string code) returns()
func (_Contract *ContractSession) SetReferral(addr common.Address, code string) (*types.Transaction, error) {
	return _Contract.Contract.SetReferral(&_Contract.TransactOpts, addr, code)
}

// SetReferral is a paid mutator transaction binding the contract method 0xb6a984ba.
//
// Solidity: function setReferral(address addr, string code) returns()
func (_Contract *ContractTransactorSession) SetReferral(addr common.Address, code string) (*types.Transaction, error) {
	return _Contract.Contract.SetReferral(&_Contract.TransactOpts, addr, code)
}

// SetUser is a paid mutator transaction binding the contract method 0x09ab28b8.
//
// Solidity: function setUser(address addr, uint256 balance, string role) returns()
func (_Contract *ContractTransactor) SetUser(opts *bind.TransactOpts, addr common.Address, balance *big.Int, role string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setUser", addr, balance, role)
}

// SetUser is a paid mutator transaction binding the contract method 0x09ab28b8.
//
// Solidity: function setUser(address addr, uint256 balance, string role) returns()
func (_Contract *ContractSession) SetUser(addr common.Address, balance *big.Int, role string) (*types.Transaction, error) {
	return _Contract.Contract.SetUser(&_Contract.TransactOpts, addr, balance, role)
}

// SetUser is a paid mutator transaction binding the contract method 0x09ab28b8.
//
// Solidity: function setUser(address addr, uint256 balance, string role) returns()
func (_Contract *ContractTransactorSession) SetUser(addr common.Address, balance *big.Int, role string) (*types.Transaction, error) {
	return _Contract.Contract.SetUser(&_Contract.TransactOpts, addr, balance, role)
}

// TransferNFT is a paid mutator transaction binding the contract method 0x9036c050.
//
// Solidity: function transferNFT(uint256 nftId, address addr) returns()
func (_Contract *ContractTransactor) TransferNFT(opts *bind.TransactOpts, nftId *big.Int, addr common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "transferNFT", nftId, addr)
}

// TransferNFT is a paid mutator transaction binding the contract method 0x9036c050.
//
// Solidity: function transferNFT(uint256 nftId, address addr) returns()
func (_Contract *ContractSession) TransferNFT(nftId *big.Int, addr common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferNFT(&_Contract.TransactOpts, nftId, addr)
}

// TransferNFT is a paid mutator transaction binding the contract method 0x9036c050.
//
// Solidity: function transferNFT(uint256 nftId, address addr) returns()
func (_Contract *ContractTransactorSession) TransferNFT(nftId *big.Int, addr common.Address) (*types.Transaction, error) {
	return _Contract.Contract.TransferNFT(&_Contract.TransactOpts, nftId, addr)
}

// TransferNFT0 is a paid mutator transaction binding the contract method 0xb90841a1.
//
// Solidity: function transferNFT(uint256 nftId, address from, address to, uint256 price) returns()
func (_Contract *ContractTransactor) TransferNFT0(opts *bind.TransactOpts, nftId *big.Int, from common.Address, to common.Address, price *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "transferNFT0", nftId, from, to, price)
}

// TransferNFT0 is a paid mutator transaction binding the contract method 0xb90841a1.
//
// Solidity: function transferNFT(uint256 nftId, address from, address to, uint256 price) returns()
func (_Contract *ContractSession) TransferNFT0(nftId *big.Int, from common.Address, to common.Address, price *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TransferNFT0(&_Contract.TransactOpts, nftId, from, to, price)
}

// TransferNFT0 is a paid mutator transaction binding the contract method 0xb90841a1.
//
// Solidity: function transferNFT(uint256 nftId, address from, address to, uint256 price) returns()
func (_Contract *ContractTransactorSession) TransferNFT0(nftId *big.Int, from common.Address, to common.Address, price *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TransferNFT0(&_Contract.TransactOpts, nftId, from, to, price)
}
